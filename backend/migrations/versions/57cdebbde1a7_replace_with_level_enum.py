"""Replace with level enum

Revision ID: 57cdebbde1a7
Revises: 481d8058e430
Create Date: 2025-06-08 16:56:59.656376

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "57cdebbde1a7"
down_revision: Union[str, None] = "481d8058e430"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create the enum type first
    levelenum = sa.Enum("LEVEL_10", "LEVEL_11", "LEVEL_12", name="levelenum")
    levelenum.create(op.get_bind())

    # Then alter the column to use the enum type
    with op.batch_alter_table("questions", schema=None) as batch_op:
        batch_op.alter_column(
            "level",
            existing_type=sa.INTEGER(),
            type_=sa.Enum("LEVEL_10", "LEVEL_11", "LEVEL_12", name="levelenum"),
            existing_nullable=False,
            postgresql_using="CASE level WHEN 10 THEN 'LEVEL_10'::levelenum WHEN 11 THEN 'LEVEL_11'::levelenum WHEN 12 THEN 'LEVEL_12'::levelenum ELSE 'LEVEL_10'::levelenum END",
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("questions", schema=None) as batch_op:
        batch_op.alter_column(
            "level",
            existing_type=sa.Enum("LEVEL_10", "LEVEL_11", "LEVEL_12", name="levelenum"),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    # ### end Alembic commands ###
